This is a simple readme describing how to compile and use the jdbc driver.

---------------------------------------------------------------------------

This isn't a guide on how to use JDBC - for that refer to sun's web site:

	http://java.sun.com/

For problems with this driver, then refer to the postgres-jdbc email
list:

	http://www.postgresql.org/

The Driver's home page is:

	http://jdbc.postgresql.org/

---------------------------------------------------------------------------

COMPILING

To compile you will need to have ANT installed. To obtain ant go to
http://jakarta.apache.org/ant/index.html and download the binary. Being pure
java it will run on virtually all java platforms. If you have any problems
please email the jdbc list.

Once you have ANT, run the configure script in the top-level directory with
the --with-java option.  Then proceed with 'make' and 'make install' as
usual.  This will compile the correct driver for your JVM, and build a .jar
file (Java ARchive) called postgresql.jar.  The file will be installed in
the directory PREFIX/share/java.

That jar file will contain the driver for _your_ version of the JDK.

If you would like to use ANT directly, first invoke 'make build.properties'
after running the configure script with the java option. This will create a
needed Java properties file from the configured information.

REMEMBER: Once you have compiled the driver, it will work on ALL platforms
that support that version of the API. You don't need to build it for each
platform.

Possible problems

You may see a message similar to:

postgresql/Driver.java:87: interface java.sql.Connection is an interface. It can't be instantiated.
    return new Connection (host(), port(), props, database(), url, this);

This is caused by not having the current directory in your CLASSPATH. Under
Linux/Solaris, unset the CLASSPATH environment variable, and rerun ant.

If you are still having problems, prebuilt versions of the driver 
are available at http://jdbc.postgresql.org/

---------------------------------------------------------------------------

INSTALLING THE DRIVER

To install the driver, the .class files have to be in the classpath.

ie: under LINUX/SOLARIS (the example here is my linux box):

	export CLASSPATH=.:/usr/local/pgsql/share/java/postgresql.jar

---------------------------------------------------------------------------

USING THE DRIVER

To use the driver, you must introduce it to JDBC. Again, there's two ways
of doing this:

1: Hardcoded.

   This method hardcodes your driver into your application/applet. You
   introduce the driver using the following snippet of code:

	try {
	  Class.forName("org.postgresql.Driver");
	} catch(Exception e) {
	  // your error handling code goes here
	}

   Remember, this method restricts your code to just the postgresql database.
   However, this is how most people load the driver.

2: Parameters

   This method specifies the driver from the command line. When running the
   application, you specify the driver using the option:

	-Djdbc.drivers=org.postgresql.Driver

   eg: This is an example of running one of my other projects with the driver:

	java -Djdbc.drivers=org.postgresql.Driver uk.org.retep.finder.Main

   note: This method only works with Applications (not for Applets).
	 However, the application is not tied to one driver, so if you needed
	 to switch databases (why I don't know ;-) ), you don't need to
	 recompile the application (as long as you havent hardcoded the url's).

---------------------------------------------------------------------------

JDBC URL syntax

The driver recognises JDBC URL's of the form:

	jdbc:postgresql:database

	jdbc:postgresql://host/database

	jdbc:postgresql://host:port/database

Also, you can supply both username and passwords as arguments, by appending
them to the URL. eg:

	jdbc:postgresql:database?user=me
	jdbc:postgresql:database?user=me&password=mypass

Notes:

1) If you are connecting to localhost or 127.0.0.1 you can leave it out of the
   URL. ie: jdbc:postgresql://localhost/mydb can be replaced with
   jdbc:postgresql:mydb

2) The port defaults to 5432 if it's left out.

---------------------------------------------------------------------------

That's the basics related to this driver. You'll need to read the JDBC Docs
on how to use it. However, there are some examples included in the example
directory. To build, type: make examples

To run them, they follow the same syntax. For example, the basic example shows
how to insert data, and perform queries:

	java example.basic jdbc:postgresql:test user password

---------------------------------------------------------------------------

POSTGRESQL SPECIFICS
--------------------

Large Objects:

A "feature" of PostgreSQL is that access to LargeObjects is only permitted
within a Transaction. Because of this, any use of LargeObjects (also known
as Blobs) requires that the Connection.setAutoCommit() method be called
disabling the autocommit feature.

For example:

	Connection db;			// open the connection here
	db.setAutoCommit(false);	// Turn off AutoCommit

			------------------

Large Object API

The first thing you need to do is to open the LargeObjectManager. This class
handles the opening of existing objects, and creating new ones. To do this,
you use the following line of code:

	LargeObjectManager lobj;
	lobj = ((org.postgresql.Connection)db).getLargeObjectAPI();

where db is a reference to an open Connection object.

Once that is done, you can use the API for the lifetime of that Connection.

To create an object, you call the create() method. This takes an argument
with the file modes you intend to use. The following line is normally
sufficient:

       int oid = lobj.create(LargeObjectManager.READ|LargeObjectManager.WRITE);

Here, lobj is the LargeObjectManager we have opened earlier, and oid is the
Large Object's oid in the database.

To open an existing object, you use the open() method. This takes an oid, and
the file permissions. It then returns a LargeObject object.

	LargeObject obj = lobj.open(oid,LargeObjectManager.WRITE);

Once the LargeObject is open, you can call methods to read, write, seek etc.
Here's the supported methods:

	int oid = obj.getOID();			Return the objects oid
	obj.close();				Close the object
	byte data[] = obj.read(int len);	Read len bytes
	onj.read(byte data[],int off,int len);	Read into data[off] len bytes
	obj.write(byte data[]);			Write the array data
	obj.write(byte data[],int off,int len);	Write len bytes from data[off]
	obj.seek(int pos,int ref);		As fseek in C.
	obj.seek(int pos);			Move to pos (from the begining)
	int pos = obj.tell();			Returns the current position
	int size = obj.size();			Returns the objects size

Caveat: If you commit(), rollback() a transaction, or turn on autocommit whilst
an object is open PostgreSQL will close it. You will need to reopen the object
before using it again. Using the existing LargeObject will cause an
SQLException to be thrown.

			------------------

JDBC supports database specific data types using the getObject() call. The
following types have their own Java equivalents supplied by the driver:

	box, circle, line, lseg, path, point, polygon

When using the getObject() method on a resultset, it returns a PG_Object,
which holds the postgres type, and its value. This object also supports
methods to retrive these types.

	Eg: column 3 contains a point, and rs is the ResultSet:

	PG_Object o = (PG_Object)rs.getObject(3);
	PGpoint p = o.getPoint();
	System.out.println("point returned x="+p.x+", y="+p.y);

Also, when using these classes, their toString() methods return the correct
syntax for writing these to the database.

---------------------------------------------------------------------------

